// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// quantile0
double quantile0(NumericVector x, double q);
RcppExport SEXP _SA23204189_quantile0(SEXP xSEXP, SEXP qSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type q(qSEXP);
    rcpp_result_gen = Rcpp::wrap(quantile0(x, q));
    return rcpp_result_gen;
END_RCPP
}
// Cauchy_paraest_mu
double Cauchy_paraest_mu(NumericVector x, int a);
RcppExport SEXP _SA23204189_Cauchy_paraest_mu(SEXP xSEXP, SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(Cauchy_paraest_mu(x, a));
    return rcpp_result_gen;
END_RCPP
}
// Cauchy_paraest_lambda
double Cauchy_paraest_lambda(NumericVector x, int b);
RcppExport SEXP _SA23204189_Cauchy_paraest_lambda(SEXP xSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(Cauchy_paraest_lambda(x, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SA23204189_quantile0", (DL_FUNC) &_SA23204189_quantile0, 2},
    {"_SA23204189_Cauchy_paraest_mu", (DL_FUNC) &_SA23204189_Cauchy_paraest_mu, 2},
    {"_SA23204189_Cauchy_paraest_lambda", (DL_FUNC) &_SA23204189_Cauchy_paraest_lambda, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_SA23204189(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
